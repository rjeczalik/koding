// Code generated by go-bindata.
// sources:
// config.json
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x95\x4b\x6e\x83\x30\x10\x40\xf7\x9c\xc2\xf2\x1a\x70\x92\x4d\x25\xae\x52\x65\x41\xf0\x88\x58\x98\x19\xcb\x1f\x54\xa9\xca\xdd\x2b\x43\x3e\x06\x35\x55\xdb\x45\x42\x56\x88\xf9\xf1\xf4\xc6\xc2\x9f\x19\x63\xdc\x52\xf0\xe0\x78\xc5\xe2\x1b\x63\x5c\xc2\x50\x76\x24\x15\xb6\x65\x43\x3d\xaf\x18\xdf\xee\xde\xca\x4d\xb9\x29\xb7\x3c\x63\xec\x94\xc7\xa6\x43\x68\x3a\xf0\x49\x97\x09\x07\xad\x1a\x4d\x6d\x8c\xbd\x8f\x31\x76\xce\x8d\x79\xc0\x41\x59\xc2\x1e\xd0\x27\x05\x53\xab\x25\x19\x1a\xaf\x08\x79\x9e\xc6\xfb\x1a\xeb\x16\x24\xbf\xc6\xf6\xb7\x34\xc7\xba\x87\xc8\x36\x91\x16\xc9\xe7\x93\x22\x0b\x6d\x9c\x5a\x31\x1e\x5c\x01\xb5\xf3\xc5\xf6\x32\xed\x94\xff\x89\x51\xc2\x00\x9a\xcc\x98\xca\x17\x89\x0b\xe7\x2c\xee\x6a\x94\x07\xfa\xf8\x0d\xbc\x84\xe1\x1f\xfc\xe3\x73\x7f\x5d\x08\xa0\x34\xa4\x30\x5d\x49\xa7\x29\xc8\xc7\x6c\x23\x58\x1d\x29\x8f\xde\x1b\x57\x09\x71\x3b\x3e\x62\x84\x10\x9d\xf2\xb0\x0a\xf3\x0b\xd0\x73\x6d\xf9\x33\x70\x96\x4c\xe1\x1d\xa1\xb7\xa4\x9f\xee\x75\xc2\x78\x29\xb3\xdf\x21\xcf\xdc\xfa\x80\x08\xda\x81\x1d\xc0\x3e\x5c\x70\x25\x84\x9f\xe1\xae\xd0\x6c\x25\x44\xfc\x5b\xdc\xe7\x9c\xe9\x54\xe6\x29\xa7\xd4\xa4\x74\x85\x50\x66\x6d\x16\xdd\x59\xa3\xd9\xdd\x25\x5d\x78\x6c\x8e\xd0\x74\xeb\x90\x39\xa1\xbc\x8c\xd1\x39\xee\xed\xd2\xca\x4e\xd9\x57\x00\x00\x00\xff\xff\x55\xe8\x22\x91\x7e\x08\x00\x00")

func configJsonBytes() ([]byte, error) {
	return bindataRead(
		_configJson,
		"config.json",
	)
}

func configJson() (*asset, error) {
	bytes, err := configJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.json", size: 2174, mode: os.FileMode(420), modTime: time.Unix(1446555960, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.json": configJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config.json": &bintree{configJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

