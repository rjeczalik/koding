// Code generated by go-bindata.
// sources:
// config.json
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x95\xcb\x6e\xab\x30\x10\x40\xd7\x97\xaf\xb0\xbc\x06\x9c\x64\x73\x25\x7e\xa5\xca\x82\xe0\x11\xb1\x30\x33\x96\x1f\xa8\x52\x95\x7f\xaf\x0c\x24\x31\x51\x53\xb5\x5d\x24\x64\x85\x98\x17\x47\x67\x2c\xfc\x91\x31\xc6\x2d\x05\x0f\x8e\x57\x2c\xbe\x31\xc6\x25\x0c\x65\x47\x52\x61\x5b\x36\xd4\xf3\x8a\xf1\xed\xee\x7f\xb9\x29\x37\xe5\x96\x67\x8c\x9d\xf2\xd8\x74\x08\x4d\x07\x3e\xe9\x32\xe1\xa0\x55\xa3\xa9\x8d\xb1\xb7\x31\xc6\xe6\xdc\x98\x07\x1c\x94\x25\xec\x01\x7d\x52\x30\xb5\x5a\x92\xa1\xf1\x8a\x90\xe7\x69\xbc\xaf\xb1\x6e\x41\xf2\x4b\x6c\x7f\x4d\x73\xac\x7b\x88\x6c\x13\x69\x91\x7c\x3e\x29\xb2\xd0\xc6\xa9\x15\xe3\xc1\x15\x50\x3b\x5f\x6c\xcf\xd3\x4e\xf9\xaf\x18\x25\x0c\xa0\xc9\x8c\xa9\xfc\x26\x71\xe6\x5c\xc4\x5d\x8d\xf2\x40\xef\x3f\x81\x97\x30\xfc\x81\x7f\x7c\xee\x2f\x0b\x01\x94\x86\x14\xa6\x2b\xe9\x34\x05\xf9\x98\x6d\x04\xab\x23\xe5\xd1\x7b\xe3\x2a\x21\xae\xc7\x47\x8c\x10\xa2\x53\x1e\x56\x61\xfe\x06\x74\xae\x2d\xbf\x07\xce\xe6\x29\xff\x78\x47\xe8\x2d\xe9\xa7\x4b\x9d\x30\x5e\x4a\xeb\x57\xc8\x59\x32\x87\xfb\x80\x08\xda\x81\x1d\xc0\x3e\x5c\x70\x25\x84\x5f\xe0\xae\xd0\x6c\x25\x44\xfc\x55\xdc\xe7\x5c\xe8\x54\xe6\x29\xa7\xd4\xa4\x74\x85\x50\x66\x6d\x16\xdd\xac\xd1\xec\xee\x92\xde\x78\x6c\x8e\xd0\x74\xeb\x90\x39\xa1\xbc\x8c\xd1\x25\xee\xf5\xc6\xca\x4e\xd9\x67\x00\x00\x00\xff\xff\x83\xa5\x13\x11\x7b\x08\x00\x00")

func configJsonBytes() ([]byte, error) {
	return bindataRead(
		_configJson,
		"config.json",
	)
}

func configJson() (*asset, error) {
	bytes, err := configJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.json", size: 2171, mode: os.FileMode(420), modTime: time.Unix(1446555960, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.json": configJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config.json": &bintree{configJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

