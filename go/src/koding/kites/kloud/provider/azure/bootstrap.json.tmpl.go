// Code generated by go-bindata.
// sources:
// bootstrap.json.tmpl
// DO NOT EDIT!

package azure

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bootstrapJsonTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\xcd\x6e\xdb\x3c\x10\x3c\x4b\x4f\x21\x10\x39\x7d\x48\xf4\x19\x3d\xe6\x16\xf4\xd0\x16\x05\x82\xa2\x0e\x7a\x29\x0a\x82\x92\x36\x32\x11\x8a\x24\xf8\xe3\xd4\x15\xf8\xee\x05\x49\xd1\xfa\xb1\x5c\xdb\xd0\x49\xe4\xec\xec\xec\xec\x72\xfb\x3c\x43\x52\x89\x3d\x6d\x40\xa1\xc7\xa2\xcf\xb3\x0c\x91\x3f\x56\xc1\xf0\x93\x21\x69\x2b\x46\xf5\x0e\x6b\x30\x86\xf2\x56\xa3\xc7\x02\xdd\xf5\x7b\xa2\xca\x80\xc3\xcb\x7b\x87\xee\x43\x9c\xb6\x95\xae\x15\x95\x86\x0a\x8e\x69\xb3\x0c\x5b\x5c\x3b\x94\x67\x99\xcb\x33\x77\x9f\x67\x48\x81\x16\x56\xd5\x30\x13\x84\x77\x42\x1b\x68\xb0\x06\xb5\xa7\xf5\xa8\xef\x4d\x34\x94\xb7\xe9\x37\x43\x9c\x74\xfe\x12\xf5\x7d\xf9\x39\x44\x6c\x63\xc0\x33\xe9\xc0\x0d\xe2\x32\xc4\x44\x4d\x7c\xea\xa5\xac\x74\x7e\x04\x82\xdc\x41\x07\x8a\x30\x5c\x0b\x6e\x80\x1b\x6f\xc0\x2b\x61\x1a\x06\x40\x03\xc7\x3a\x3c\x59\xcc\x59\x0c\x2a\x8b\x5a\x01\xf1\xff\xd5\xa1\xf8\x1a\x85\x26\x01\xa4\x02\x36\xe8\x7c\x01\xd2\x6d\x99\x6d\x9d\x2b\x63\x35\x65\x2d\x3a\x6f\x88\x77\x24\x73\xf7\x7d\x4f\x5f\x8b\x72\x6b\x84\x22\x2d\xcc\xca\x19\xdd\xd1\xf1\xf6\x16\x7b\xd6\x08\x6f\xf6\x67\x51\xfe\xc0\x79\xb9\x7e\x52\xd7\xc2\x72\x83\xcd\x41\x2e\xf4\xbc\x1c\xa4\x17\x32\x2d\x1f\x78\x33\xab\x15\x6a\xab\xa8\x39\xe0\x56\x09\x2b\xaf\x2a\x75\x88\xf8\xe4\x03\x6e\xad\x74\x54\x32\x4a\xd8\x53\x65\x2c\x61\x98\x83\x79\x17\xea\xed\x1a\x0d\x3f\x62\xc8\x73\x8c\x98\x8b\x20\x4d\xa3\x40\x6b\xac\x25\x09\xbd\xfb\xe9\x03\x9e\xe2\xe1\xd6\x9f\x39\x87\x7e\xdd\xda\x1a\x6d\x2b\x0e\xe6\xa8\x65\x14\xa3\x6d\xf5\x10\x85\x3e\x18\x20\xdd\x80\x1f\x55\x48\x05\xaf\xf4\xf7\x20\x7b\xa1\x22\x61\x4f\x7a\x80\xee\xfa\xb5\xee\xa4\x89\xf6\xb9\xa3\x95\xc1\xcb\x68\x68\x1c\xec\xef\x96\x81\x9b\x9a\x3b\x67\xc0\xca\xb2\xcb\xf3\xac\x5b\xb5\x52\xd3\x42\x26\xf6\x68\x9d\xfc\x5d\x1b\x8a\x64\x72\x1a\xcb\x2f\xbc\x12\x96\x37\xe3\xd4\x26\xe7\x9f\x18\x13\xef\xe9\x58\x2a\x2a\x3c\x13\x7a\x2c\x3e\x6c\x36\x29\x75\xd8\x61\xf8\xd4\xd4\x4d\x19\xbe\xff\x37\x68\x8e\x94\x42\x19\xac\x08\x6f\x43\xe6\xff\x26\x2f\xcc\x50\x1e\x5a\x7b\x0d\xd9\x14\x7e\x86\x51\x2a\x61\x44\x2d\xc2\xfa\x79\xf9\xf8\x0d\x4d\xfa\x31\xbc\xb4\xb0\x86\x85\x35\xd2\xa6\xf9\x41\xf3\xf5\x8b\x07\xdf\x63\x53\xf6\x84\x59\x98\xce\xc0\x1c\x9c\x66\x20\xad\xf9\xd0\xea\xc5\xc2\xba\x40\xb8\x40\x9f\x30\xfe\x7b\x45\x9e\x59\x18\xa7\x59\x56\x47\x77\x92\xe4\xb8\x88\xce\xbd\xff\x13\xca\x05\x70\xdd\x8a\xd9\x43\xbd\x9a\x23\x86\x8d\x2f\xcb\xf7\x2d\x77\x79\xfe\x37\x00\x00\xff\xff\x09\x80\xf2\x2c\xd4\x07\x00\x00")

func bootstrapJsonTmplBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapJsonTmpl,
		"bootstrap.json.tmpl",
	)
}

func bootstrapJsonTmpl() (*asset, error) {
	bytes, err := bootstrapJsonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.json.tmpl", size: 2004, mode: os.FileMode(420), modTime: time.Unix(1470666525, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bootstrap.json.tmpl": bootstrapJsonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"bootstrap.json.tmpl": &bintree{bootstrapJsonTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
