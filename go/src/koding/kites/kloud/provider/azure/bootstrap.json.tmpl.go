// Code generated by go-bindata.
// sources:
// bootstrap.json.tmpl
// DO NOT EDIT!

package azure

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bootstrapJsonTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x55\xcd\x6e\xdb\x3c\x10\x3c\x4b\x4f\x21\x10\x39\x7d\x48\xf4\x19\x3d\xe6\x16\xf4\xd0\x16\x05\x82\xa2\x0e\x7a\x29\x0a\x82\x92\x36\x0a\x11\x8a\x24\xf8\xe3\xd4\x15\xf8\xee\x05\x49\xd1\x12\x65\xa7\xb6\xe1\x93\xc8\xd9\xd9\xd9\xd9\xe5\x7a\x2c\x0b\x24\x95\xd8\xd1\x0e\x14\xba\xaf\xc6\xb2\x28\x10\xf9\x63\x15\x4c\x1f\x05\x92\xb6\x61\x54\xbf\x60\x0d\xc6\x50\xde\x6b\x74\x5f\xa1\x9b\x71\x47\x54\x1d\x70\x78\x7d\xef\xd0\x6d\x88\xd3\xb6\xd1\xad\xa2\xd2\x50\xc1\x31\xed\xd6\x61\xab\x6b\x87\xca\xa2\x70\x65\xe1\x6e\xcb\x02\x29\xd0\xc2\xaa\x16\x32\x41\xf8\x45\x68\x03\x1d\xd6\xa0\x76\xb4\x9d\xf5\xbd\x8a\x8e\xf2\x3e\x7d\x16\x88\x93\xc1\x5f\xa2\x71\xac\x3f\x87\x88\x6d\x0c\x78\x24\x03\xb8\x49\x5c\x81\x98\x68\x89\x4f\xbd\x96\x95\xce\x0f\x40\x90\x2f\x30\x80\x22\x0c\xb7\x82\x1b\xe0\xc6\x1b\xf0\x4c\x98\x86\x09\xd0\xc1\xa1\x0e\x4f\x16\x73\x56\x93\xca\xaa\x55\x40\xfc\x77\xb3\xaf\xbe\x46\xa1\x49\x00\x69\x80\x4d\x3a\x9f\x80\x0c\x5b\x66\x7b\xe7\xea\x58\x4d\xdd\x8a\xc1\x1b\xe2\x1d\x29\xdc\xed\x38\xd2\xe7\xaa\xde\x1a\xa1\x48\x0f\x59\x39\xb3\x3b\x3a\xde\x5e\x63\xcf\x29\xc2\xab\xfd\x59\x95\x3f\x71\x9e\xaf\x9f\xb4\xad\xb0\xdc\x60\xb3\x97\x2b\x3d\x4f\x7b\xe9\x85\x2c\xcb\x07\xde\x65\xb5\x42\x6b\x15\x35\x7b\xdc\x2b\x61\xe5\x45\xa5\x4e\x11\x9f\x7c\xc0\xb5\x95\xce\x4a\x66\x09\x3b\xaa\x8c\x25\x0c\x73\x30\x6f\x42\xbd\x5e\xa2\xe1\x47\x0c\x79\x8c\x11\xb9\x08\xd2\x75\x0a\xb4\xc6\x5a\x92\xd0\xbb\x9f\x3e\xe0\x21\x1e\x6e\xfd\x99\x73\xe8\xd7\xb5\xad\xd1\xb6\xe1\x60\x0e\x5a\x72\x43\xc2\x5d\x26\x62\x56\x21\x15\x3c\xd3\xdf\x13\x72\xa5\x22\x61\x8f\x7a\x80\x6e\xc6\x53\xdd\x49\x13\xed\x73\x47\x2b\x83\x97\xd1\xd0\x38\xd8\xdf\x2d\x03\xb7\x34\x37\x67\xc0\xca\xb2\xf3\xf3\xac\x7b\x75\x17\xef\xee\x0c\x90\xe1\xe0\x41\x4e\xe5\xd1\x3a\xf9\x7b\x6a\x28\x92\xc9\x69\x2c\xbf\xf0\x46\x58\xde\xcd\x53\x9b\x9c\x7f\x60\x4c\xbc\xa5\x63\xa9\xa8\xf0\x4c\xe8\xbe\xfa\xb0\xd9\xa4\xd4\x61\x87\xe1\x63\x53\x37\x75\xf8\xfd\xbf\x41\x39\x52\x0a\x65\xb0\x22\xbc\x0f\x99\xff\x5b\xbc\x30\x43\x79\x68\xed\x25\x64\x4b\xf8\x3b\x8c\x52\x09\x23\x5a\x11\xd6\xcf\xd3\xc7\x6f\x68\xd1\x8f\xe9\xa5\x85\x35\x2c\xac\x91\x36\xcd\x0f\xca\xd7\x2f\x9e\x7c\x8f\x4d\xd9\x11\x66\x61\x39\x03\x39\x38\xcd\x40\x5a\xf3\xa1\xd5\xab\x85\x75\x86\x70\x85\x3e\x62\xfc\xf7\x8a\x7c\x67\x61\x1c\x67\x39\x39\xba\x8b\x24\x87\x45\xf4\xde\xfb\x3f\xa2\x5c\x01\x4f\x5b\x91\x3d\xd4\x99\x63\xfd\x4e\xa7\xbf\xc8\xd2\x95\xe5\xdf\x00\x00\x00\xff\xff\xc8\xa0\x5f\x85\xb8\x07\x00\x00")

func bootstrapJsonTmplBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapJsonTmpl,
		"bootstrap.json.tmpl",
	)
}

func bootstrapJsonTmpl() (*asset, error) {
	bytes, err := bootstrapJsonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.json.tmpl", size: 1976, mode: os.FileMode(420), modTime: time.Unix(1470666525, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bootstrap.json.tmpl": bootstrapJsonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"bootstrap.json.tmpl": &bintree{bootstrapJsonTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
